/* Generated By:JavaCC: Do not edit this line. MiniJavaParser.java */
package parser;
import syntax.Type;
import syntax.Program;
import syntax.MainClass;
import syntax.ClassDecl;
import syntax.Expression;
import syntax.And;
import syntax.Plus;
import syntax.Minus;
import syntax.Times;
import syntax.LessThan;
import syntax.Call;
import syntax.NewArray;
import syntax.ArrayLength;
import syntax.ArrayLookup;
import syntax.NewObject;
import syntax.IntegerLiteral;
import syntax.True;
import syntax.False;
import syntax.IdentifierExp;
import syntax.Not;
import syntax.This;
import syntax.Identifier;
import syntax.IdentifierType;
import syntax.Statement;
import syntax.Block;
import syntax.If;
import syntax.While;
import syntax.Print;
import syntax.ArrayAssign;
import syntax.Assign;
import syntax.MethodDecl;
import syntax.FieldDecl;
import syntax.LocalDecl;
import syntax.FormalDecl;
import syntax.SimpleClassDecl;
import syntax.ExtendingClassDecl;
import error.ErrorHandler;

import java.util.*;

public class MiniJavaParser implements MiniJavaParserConstants {
        private static boolean first = false;

  static final public Program Goal() throws ParseException {
                MainClass m;
                List <ClassDecl> cl = new ArrayList<ClassDecl>();
                        ClassDecl temp;
    try {
      m = MainClass();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        temp = ClassDecl();
                                                         cl.add(temp);
      }
      jj_consume_token(0);
                                                                                 {if (true) return new Program(m, cl);}
    } catch (ParseException e) {
                        ErrorHandler(e);
                                {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public MainClass MainClass() throws ParseException {
                Identifier ai1;
                Identifier ai2;
                Statement as;
                Token t1, t2;
    try {
      jj_consume_token(CLASS);
      t1 = jj_consume_token(IDENTIFIER);
                                                         ai1=new Identifier(t1.beginLine, t1.beginColumn, t1.image);
      jj_consume_token(CURLYOPEN);
      jj_consume_token(PUBLIC);
      jj_consume_token(STATIC);
      jj_consume_token(VOID);
      jj_consume_token(MAIN);
      jj_consume_token(PAROPEN);
      jj_consume_token(STRING);
      jj_consume_token(SQBOPEN);
      jj_consume_token(SQBCLOSE);
      t2 = jj_consume_token(IDENTIFIER);
                                                                                                                                 ai2=new Identifier(t2.beginLine, t2.beginColumn, t2.image);
      jj_consume_token(PARCLOSE);
      jj_consume_token(CURLYOPEN);
      as = Statement();
      jj_consume_token(CURLYCLOSE);
      jj_consume_token(CURLYCLOSE);
                                          {if (true) return new MainClass(t1.beginLine, t1.beginColumn, ai1, ai2, as);}
    } catch (ParseException e) {
                                ErrorHandler(e);
                                {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public ClassDecl ClassDecl() throws ParseException {
                        Identifier ai;
                        List <FieldDecl> afl = new ArrayList<FieldDecl>();
                        List <MethodDecl> aml = new ArrayList<MethodDecl>();
                        Identifier aj;

                        Identifier tempAj = null;

                        FieldDecl tempField;
                        MethodDecl tempMethod;
                        Token id1, extId;
                        boolean extended = false;
    try {
      jj_consume_token(CLASS);
      id1 = jj_consume_token(IDENTIFIER);
                                                          ai=new Identifier(id1.beginLine, id1.beginColumn, id1.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        extId = jj_consume_token(IDENTIFIER);
                                                                                                                                                        tempAj=new Identifier(extId.beginLine, extId.beginColumn, extId.image); extended = true;
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      jj_consume_token(CURLYOPEN);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TYPEBOOL:
        case TYPEINT:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        tempField = FieldDecl();
                                                        afl.add(tempField);
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        tempMethod = MethodDeclaration();
                                                                         aml.add(tempMethod);
      }
      jj_consume_token(CURLYCLOSE);
                          if(extended) {
                              aj = tempAj;
                                  {if (true) return new ExtendingClassDecl(ai, aj, afl, aml);}
                                } else {
                                          {if (true) return new SimpleClassDecl(ai, afl, aml);}
                                }
    } catch (ParseException e) {
                                ErrorHandler(e);
                                {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public LocalDecl LocalDecl() throws ParseException {
                        Type at;
                        Identifier ai;

                        Token id1;
    try {
      at = Type();
      id1 = jj_consume_token(IDENTIFIER);
      jj_consume_token(SEMICOLON);
                                  ai=new Identifier(id1.beginLine, id1.beginColumn, id1.image);
                                  {if (true) return new LocalDecl(at, ai);}
    } catch (ParseException e) {
                                ErrorHandler(e);
                                {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public FieldDecl FieldDecl() throws ParseException {
                        Type at;
                        Identifier ai;

                        Token id1;
    try {
      at = Type();
      id1 = jj_consume_token(IDENTIFIER);
      jj_consume_token(SEMICOLON);
                                  ai=new Identifier(id1.beginLine, id1.beginColumn, id1.image);
                                  {if (true) return new FieldDecl(at, ai);}
    } catch (ParseException e) {
                                ErrorHandler(e);
                                {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public MethodDecl MethodDeclaration() throws ParseException {
                        syntax.Type at;
                Identifier ai;
                List <FormalDecl> afl = new ArrayList<FormalDecl>();
                List <LocalDecl> ll = new ArrayList<LocalDecl>();
                List <Statement> asl = new ArrayList<Statement>();
                Expression ae;

                Type t1, t2;
                        Identifier fId1, fId2;

                        Token id1, id2, id3;
                        FormalDecl fDec1, fDec2;
                        LocalDecl lDec;
                        Statement sTemp;
    try {
      jj_consume_token(PUBLIC);
      at = Type();
      id1 = jj_consume_token(IDENTIFIER);
                                                                     ai=new Identifier(id1.beginLine, id1.beginColumn, id1.image);
      jj_consume_token(PAROPEN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TYPEBOOL:
      case TYPEINT:
      case IDENTIFIER:
        t1 = Type();
        id2 = jj_consume_token(IDENTIFIER);
                                                                                                                                                                           fId1=new Identifier(id2.beginLine, id2.beginColumn, id2.image); fDec1=new FormalDecl(t1, fId1); afl.add(fDec1);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[4] = jj_gen;
            break label_4;
          }
          jj_consume_token(COMMA);
          t2 = Type();
          id3 = jj_consume_token(IDENTIFIER);
                                                                                                                                                                                                                                                                                                                                fId2=new Identifier(id3.beginLine, id3.beginColumn, id3.image); fDec2=new FormalDecl(t2, fId2); afl.add(fDec2);
        }
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(PARCLOSE);
      jj_consume_token(CURLYOPEN);
      label_5:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_5;
        }
        lDec = LocalDecl();
                                                                ll.add(lDec);
      }
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case WHILE:
        case PRINT:
        case CURLYOPEN:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_6;
        }
        sTemp = Statement();
                                                        asl.add(sTemp);
      }
      jj_consume_token(RETURN);
      ae = Expression();
      jj_consume_token(SEMICOLON);
      jj_consume_token(CURLYCLOSE);
                                        {if (true) return new MethodDecl(at, ai, afl, ll, asl, ae);}
    } catch (ParseException e) {
                                ErrorHandler(e);
                                {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Type Type() throws ParseException {
                        Token id1;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TYPEINT:
        jj_consume_token(TYPEINT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SQBOPEN:
          jj_consume_token(SQBOPEN);
          jj_consume_token(SQBCLOSE);
                                                                  {if (true) return Type.THE_INT_ARRAY_TYPE;}
          break;
        default:
          jj_la1[7] = jj_gen;
          ;
        }
                                                                                                     {if (true) return Type.THE_INTEGER_TYPE;}
        break;
      case TYPEBOOL:
        jj_consume_token(TYPEBOOL);
                                             {if (true) return Type.THE_BOOLEAN_TYPE;}
        break;
      case IDENTIFIER:
        id1 = jj_consume_token(IDENTIFIER);
                                                   {if (true) return new IdentifierType(id1.beginLine, id1.beginColumn, id1.image);}
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
                                ErrorHandler(e);
                                {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Statement Statement() throws ParseException {
                        Identifier nameOfArray;
                        Expression indexInArray;
                        Expression arrE;

                        Expression printE;

                        Expression whileE;
                        Statement whileState;

                        Expression ifE;
                        Statement ifS1, ifS2;

                        Expression temp = null;

                        Token id1;

                        boolean arrAss = false;
                        Statement blkS;
                        final List <Statement> sl = new ArrayList<Statement>();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CURLYOPEN:
        jj_consume_token(CURLYOPEN);
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IF:
          case WHILE:
          case PRINT:
          case CURLYOPEN:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[9] = jj_gen;
            break label_7;
          }
          blkS = Statement();
                                                                sl.add(blkS);
        }
        jj_consume_token(CURLYCLOSE);
                                                                                               {if (true) return new Block(sl);}
        break;
      case IF:
        jj_consume_token(IF);
        jj_consume_token(PAROPEN);
        ifE = Expression();
        jj_consume_token(PARCLOSE);
        ifS1 = Statement();
        jj_consume_token(ELSE);
        ifS2 = Statement();
                                                                                                                        {if (true) return new If(ifE.lineNumber, ifE.columnNumber, ifE, ifS1, ifS2);}
        break;
      case WHILE:
        jj_consume_token(WHILE);
        jj_consume_token(PAROPEN);
        whileE = Expression();
        jj_consume_token(PARCLOSE);
        whileState = Statement();
                                                                                                            {if (true) return new While(whileE.lineNumber, whileE.columnNumber, whileE, whileState);}
        break;
      case PRINT:
        jj_consume_token(PRINT);
        jj_consume_token(PAROPEN);
        printE = Expression();
        jj_consume_token(PARCLOSE);
        jj_consume_token(SEMICOLON);
                                                                                                 {if (true) return new Print(printE.lineNumber, printE.columnNumber, printE);}
        break;
      case IDENTIFIER:
        id1 = jj_consume_token(IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SQBOPEN:
          jj_consume_token(SQBOPEN);
          temp = Expression();
          jj_consume_token(SQBCLOSE);
                                                                                             arrAss=true;
          break;
        default:
          jj_la1[10] = jj_gen;
          ;
        }
        jj_consume_token(EQUAL);
        arrE = Expression();
        jj_consume_token(SEMICOLON);
                                    if(arrAss) {
                                        indexInArray=temp;
                                                nameOfArray=new Identifier(id1.beginLine, id1.beginColumn, id1.image);
                                                {if (true) return new ArrayAssign(id1.beginLine, id1.beginColumn, nameOfArray, indexInArray, arrE);}
                                        } else if(!arrAss) {
                                                nameOfArray=new Identifier(id1.beginLine, id1.beginColumn, id1.image);
                                                {if (true) return new Assign(id1.beginLine, id1.beginColumn, nameOfArray, arrE);}
                                        }
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
                                ErrorHandler(e);
                                {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

// You must remove left recursion before writing your grammar rules in JavaCC.
// The general approach is to replace rules of the form A - > a | Ax with A - > a (x)*
  static final public Expression Expression() throws ParseException {
                Expression e1;
    try {
      e1 = And();
                                  {if (true) return e1;}
    } catch (ParseException e) {
                        ErrorHandler(e);
                        {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expression And() throws ParseException {
          Expression e1, e2;
    try {
      e1 = LessThan();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_8;
        }
        jj_consume_token(AND);
        e2 = LessThan();
                                                            e1=new And(e1.lineNumber, e1.columnNumber, e1, e2);
      }
                                                                                                                     {if (true) return e1;}
    } catch (ParseException e) {
                        ErrorHandler(e);
                        {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expression LessThan() throws ParseException {
                Expression e1, e2;
    try {
      e1 = AdditiveExp();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESSTHAN:
        jj_consume_token(LESSTHAN);
        e2 = AdditiveExp();
                                                                        e1=new LessThan(e1.lineNumber, e1.columnNumber, e1, e2);
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
                                                                                                                                    {if (true) return e1;}
    } catch (ParseException e) {
                        ErrorHandler(e);
                        {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expression AdditiveExp() throws ParseException {
                Expression e1, e2;

                boolean plus = false;
    try {
      e1 = Times();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_9;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
                                             plus=true;
          break;
        case MINUS:
          jj_consume_token(MINUS);
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        e2 = Times();
                                                                              if(plus) e1=new Plus(e1.lineNumber, e1.columnNumber, e1, e2); else e1=new Minus(e1.lineNumber, e1.columnNumber, e1, e2);
      }
                                                                                                                                                                                                           {if (true) return e1;}
    } catch (ParseException e) {
                        ErrorHandler(e);
                        {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expression Times() throws ParseException {
                Expression e1, e2;
    try {
      e1 = PrefixExp();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TIMES:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_10;
        }
        jj_consume_token(TIMES);
        e2 = PrefixExp();
                                                                e1=new Times(e1.lineNumber, e1.columnNumber, e1, e2);
      }
                                                                                                                          {if (true) return e1;}
    } catch (ParseException e) {
                        ErrorHandler(e);
                        {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expression PrefixExp() throws ParseException {
                Expression temp1;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXCMARK:
        temp1 = Not();
                                     {if (true) return temp1;}
        break;
      case NEW:
      case THIS:
      case IntLiteral:
      case BOOL_LITERAL:
      case PAROPEN:
      case IDENTIFIER:
        temp1 = PostfixExp();
                                                                         {if (true) return temp1;}
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
                        ErrorHandler(e);
                        {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expression Not() throws ParseException {
                Expression nE;
    try {
      label_11:
      while (true) {
        jj_consume_token(EXCMARK);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXCMARK:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_11;
        }
      }
      nE = PostfixExp();
                                                      {if (true) return new Not(nE.lineNumber, nE.columnNumber, nE);}
    } catch (ParseException e) {
                        ErrorHandler(e);
                        {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expression PostfixExp() throws ParseException {
                Expression expressionForArray1, expressionForArray2, indexInArray;

                Expression callE;
                Identifier callI;
                List <Expression> callEl = new ArrayList<Expression>();

                Token tempT;
                Expression tempE;
                Expression fAdder, rest;
    try {
      tempE = PrimaryExp();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SQBOPEN:
        case DOT:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_12;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SQBOPEN:
          jj_consume_token(SQBOPEN);
          indexInArray = Expression();
          jj_consume_token(SQBCLOSE);
                                                                                            expressionForArray1=tempE; {if (true) return new ArrayLookup(indexInArray.lineNumber, indexInArray.columnNumber, expressionForArray1, indexInArray);}
          break;
        default:
          jj_la1[22] = jj_gen;
          if (jj_2_2(2)) {
            jj_consume_token(DOT);
            tempT = jj_consume_token(IDENTIFIER);
                                                                               callI=new Identifier(tempT.beginLine, tempT.beginColumn, tempT.image);
            jj_consume_token(PAROPEN);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case NEW:
            case THIS:
            case IntLiteral:
            case BOOL_LITERAL:
            case PAROPEN:
            case EXCMARK:
            case IDENTIFIER:
              fAdder = Expression();
                                                                                                                                                                                       callEl.add(fAdder);
              label_13:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case COMMA:
                  ;
                  break;
                default:
                  jj_la1[20] = jj_gen;
                  break label_13;
                }
                jj_consume_token(COMMA);
                rest = Expression();
                                                                                                                                                                                                                                       callEl.add(rest);
              }
              break;
            default:
              jj_la1[21] = jj_gen;
              ;
            }
            jj_consume_token(PARCLOSE);
                                                                                                                                                                                                                                                                         callE=tempE; {if (true) return new Call(tempT.beginLine, tempT.beginColumn, callE, callI, callEl);}
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case DOT:
              jj_consume_token(DOT);
              jj_consume_token(LENGTH);
                                                                       expressionForArray2=tempE; {if (true) return new ArrayLength(expressionForArray2.lineNumber, expressionForArray2.columnNumber, expressionForArray2);}
              break;
            default:
              jj_la1[23] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
                                                                                                                                                                                                                     {if (true) return tempE;}
    } catch (ParseException e) {
                        ErrorHandler(e);
                        {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expression PrimaryExp() throws ParseException {
                Token tempThis, tempIntLiteral;
                int ai;

                Identifier objId;
                Expression arrE;

                Token tempBool, id1, idE;

                Expression tempE;
    try {
      if (jj_2_3(2)) {
        jj_consume_token(NEW);
        jj_consume_token(TYPEINT);
        jj_consume_token(SQBOPEN);
        arrE = Expression();
        jj_consume_token(SQBCLOSE);
                                                                                {if (true) return new NewArray(arrE.lineNumber, arrE.columnNumber, arrE);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
          jj_consume_token(NEW);
          id1 = jj_consume_token(IDENTIFIER);
          jj_consume_token(PAROPEN);
          jj_consume_token(PARCLOSE);
                                                               objId=new Identifier(id1.beginLine, id1.beginColumn, id1.image); {if (true) return new NewObject(id1.beginLine, id1.beginColumn, objId);}
          break;
        case IntLiteral:
          tempIntLiteral = jj_consume_token(IntLiteral);
                                               ai=Integer.parseInt(tempIntLiteral.image); {if (true) return new IntegerLiteral(tempIntLiteral.beginLine, tempIntLiteral.beginColumn, ai);}
          break;
        case BOOL_LITERAL:
          tempBool = jj_consume_token(BOOL_LITERAL);
                                           if(tempBool.image=="true") {{if (true) return new True(tempBool.beginLine, tempBool.beginColumn);}} else {{if (true) return new False(tempBool.beginLine, tempBool.beginColumn);}}
          break;
        case IDENTIFIER:
          idE = jj_consume_token(IDENTIFIER);
                                            {if (true) return new IdentifierExp(idE.beginLine, idE.beginColumn, idE.image);}
          break;
        case THIS:
          tempThis = jj_consume_token(THIS);
                                   {if (true) return new This(tempThis.beginLine, tempThis.beginColumn);}
          break;
        case PAROPEN:
          jj_consume_token(PAROPEN);
          tempE = Expression();
          jj_consume_token(PARCLOSE);
                                                           {if (true) return tempE;}
          break;
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
                        ErrorHandler(e);
                        {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  static void ErrorHandler(ParseException e) throws ParseException {
        Token t = e.currentToken.next;
        int exp = -1;

        for(int i = 0; exp == -1 && i < e.expectedTokenSequences.length; i++)
                for(int j = 0; exp == -1 && j < e.expectedTokenSequences[i].length; j++)
                        exp = e.expectedTokenSequences[i][j];
        if(!MiniJavaParser.first) {
                if (exp != -1) {
                        System.err.println(String.format("%s:%d.%d: %s", ErrorHandler.filename, t.beginLine, t.beginColumn, String.format("Syntax Error: expecting a %s\u005cn", e.tokenImage[exp])));
                        MiniJavaParser.first = true;
                        throw generateParseException();
                }
                else {
                        System.err.println(String.format("%s:%d.%d: %s", ErrorHandler.filename, t.beginLine, t.beginColumn, "Syntax Error: unknown"));
                        MiniJavaParser.first = true;
                        throw generateParseException();
                }
        } else
                throw generateParseException();
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(TYPEBOOL)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(TYPEINT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(TYPEINT)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(SQBOPEN)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MiniJavaParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[25];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10,0x400,0x21000,0x20,0x0,0x21000,0x10200a,0x1000000,0x21000,0x10200a,0x1000000,0x10200a,0x8000000,0x10000000,0x60000000,0x60000000,0x80000000,0x4d8000,0x0,0x1000000,0x0,0x4d8000,0x1000000,0x0,0x4d8000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x40,0x0,0x2,0x40,0x40,0x0,0x40,0x40,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x44,0x4,0x1,0x2,0x44,0x0,0x1,0x40,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[3];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MiniJavaParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiniJavaParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MiniJavaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MiniJavaParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MiniJavaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MiniJavaParser(MiniJavaParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MiniJavaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[46];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 25; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 46; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
